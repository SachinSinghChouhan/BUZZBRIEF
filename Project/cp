from fastapi import FastAPI, Depends, HTTPException, status
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
import requests
import datetime
import pyttsx3  # For text-to-speech conversion

# Database setup
DATABASE_URL = "postgresql://postgres.bzvinlggnrivnycbfkjv:[YOUR-PASSWORD]@aws-0-ap-south-1.pooler.supabase.com:5432/postgres"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# FastAPI app initialization
app = FastAPI()

# News Model
class News(Base):
    __tablename__ = "news"
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(Text)
    url = Column(String)
    published_at = Column(DateTime)
    summary = Column(Text, nullable=True)
    audio_path = Column(String, nullable=True)
    is_kid_friendly = Column(Boolean, default=False)

# Create the database tables
Base.metadata.create_all(bind=engine)

# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Route to fetch news from external API and store it in the database with summarization
@app.post("/fetch-news")
def fetch_news(db: Session = Depends(get_db)):
    news_api_url = "https://newsapi.org/v2/top-headlines?country=us&apiKey=YOUR_API_KEY"
    response = requests.get(news_api_url)
    if response.status_code != 200:
        raise HTTPException(status_code=400, detail="Failed to fetch news")
    
    news_data = response.json().get("articles", [])
    for article in news_data:
        summary = generate_summary(article.get("description", ""))  # Simple summarization
        audio_path = generate_audio(summary)  # Generate audio for the summary
        news_item = News(
            title=article.get("title"),
            description=article.get("description"),
            url=article.get("url"),
            published_at=datetime.datetime.strptime(article.get("publishedAt"), "%Y-%m-%dT%H:%M:%SZ"),
            summary=summary,
            audio_path=audio_path,
            is_kid_friendly=is_kid_friendly_content(article.get("description", ""))
        )
        db.add(news_item)
    db.commit()
    return {"message": "News fetched, summarized, and stored successfully"}

# Helper functions for summarization, audio generation, and kid-friendly content check
def generate_summary(text: str) -> str:
    # Placeholder for ML-based summarization logic
    return text[:100] + "..." if text else ""

def generate_audio(text: str) -> str:
    engine = pyttsx3.init()
    audio_file = f"audio/{datetime.datetime.now().timestamp()}.mp3"
    engine.save_to_file(text, audio_file)
    engine.runAndWait()
    return audio_file

def is_kid_friendly_content(text: str) -> bool:
    # Placeholder logic to determine if content is kid-friendly
    kid_unfriendly_words = ["violence", "drugs", "crime"]
    return not any(word in text.lower() for word in kid_unfriendly_words)

# Route to get all stored news
@app.get("/news")
def get_news(db: Session = Depends(get_db), category: str = None, is_kid_friendly: bool = None):
    query = db.query(News)
    if category:
        query = query.filter(News.description.like(f"%{category}%"))
    if is_kid_friendly is not None:
        query = query.filter(News.is_kid_friendly == is_kid_friendly)
    news_items = query.order_by(News.published_at.desc()).all()
    return news_items

# Route for playing audio of a specific news article
@app.get("/news/{news_id}/audio")
def play_audio(news_id: int, db: Session = Depends(get_db)):
    pass

# Route for health check
@app.get("/health")
def health_check():
    return {"status": "ok"}

# JWT Authentication and user management can be added next.
